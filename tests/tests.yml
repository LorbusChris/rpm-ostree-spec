---
- hosts: localhost
  vars:
    artifacts: "{{ lookup('env', 'TEST_ARTIFACTS')|default('./artifacts', true) }}"
    subjects: "{{ lookup('env', 'TEST_SUBJECTS')}}"
  tags:
    - atomic
  tasks:

    # XXX: move to standard-test-roles, e.g. standard-test-get-source
    - name: install requirements
      package: name={{item}} state=present # XXX: state=latest
      with_items:
        - fedpkg

    # The dist doesn't actually matter here
    - name: download and extract sources
      command: fedpkg --dist=master prep
      args:
        chdir: "{{playbook_dir}}/.."

    - name: get source directory from environment
      shell: "rpm -q --specfile {{playbook_dir}}/../rpm-ostree.spec --qf '{{playbook_dir}}/../%{NAME}-%{VERSION}\n' | head -n1"
      register: srcdir

    - name: provision VM
      qemu_provision:
        subjects: "{{subjects}}"
        log: "{{artifacts}}/machine.log"
      register: qemu

    - set_fact:
        vmssh: ssh -F {{qemu.statedir}}/ssh-config vmcheck

    - block:
        - name: import ssh-config
          command: cp {{qemu.statedir}}/ssh-config {{srcdir.stdout}}

        # XXX: need to upstream this
        - name: create and rebase onto vmcheck
          command: "{{vmssh}} rpm-ostree status --json"
          register: status
        - set_fact:
            status_json: "{{ status.stdout | from_json }}"
        - command: "{{vmssh}} ostree refs {{ status_json['deployments'][0]['origin'] }} --create vmcheck"
        - command: "{{vmssh}} rpm-ostree rebase :vmcheck"
        # XXX: use ans_reboot.yml from a-h-t
        - shell: "{{vmssh}} shutdown -r now"
          ignore_errors: true

        - name: run vmcheck
          command: tests/vmcheck/multitest.py vmcheck
          # XXX: consider making vmcheck become an installed test
          environment:
            VMTESTS: 1
            SKIP_VMOVERLAY: 1
            TESTS: basic layering-basic
            topsrcdir: "{{srcdir.stdout}}"
            commondir: "{{srcdir.stdout}}/tests/common"
          args:
            chdir: "{{srcdir.stdout}}"

      always:
        - name: teardown VM
          qemu_teardown:
            statedir: "{{qemu.statedir}}"

        - name: fetch vmcheck results
          synchronize:
            src: "{{srcdir.stdout}}/vmcheck/"
            dest: "{{artifacts}}/vmcheck"
            mode: pull
            delete: yes
